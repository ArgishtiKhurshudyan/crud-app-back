let jwt,User,Color,Product;_ca5‍.x([["verifyToken",()=>verifyToken]]);_ca5‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_ca5‍.w("./models",[["User",["User"],function(v){User=v}],["Color",["Color"],function(v){Color=v}],["Product",["Product"],function(v){Product=v}]]);


       const verifyToken = async (req, res, next) => {
  try {
    const bearerToken = req.headers.authorization || req.headers["x-access-token"];

    if (!bearerToken) {
      return res.status(401).json({message: "user not authorized"})
    }
    const token = bearerToken.replace('Bearer ', '')
    if (!token) {
      return res.status(401).json({message: "user not authorized"})
    }


    jwt.verify(token, process.env.JWT, async (err, decodedData) => {
      if (err) {
        return res.status(401).json({message: "Invalid token."})
      }

      const {id, iat} = decodedData;
      if (!decodedData) {
        return res.status(401).json({message: "user not authorized"})
      }

      const user = await User.findOne({
        where: {
          id,
        },
        include: {
          model: Product,
          include: {
            model: Color,
            as: 'products'
          }
        }
      })
      // if (req.user.isAdmin) {
      //   next();
      // } else {
      //   return res.status(401)("You are not authorized!")
      // }
      if (!user || req.user.isAdmin !== true) {
        return res.status(401).json({message: "user not authorized"})
      }else{
        req.user = user
        next()
      }

    });


  } catch (e) {
    _ca5‍.g.console.log("errorner", e)
    return res.status(500).json({message: "Something went w wrong!"})
  }
}
// export const verifyAdmin = (req, res, next) => {
//   verifyToken(req, res, next, () => {
//     if (req.user.isAdmin) {
//       next();
//     } else {
//       return res.status(401)("You are not authorized!")
//     }
//   });
// };