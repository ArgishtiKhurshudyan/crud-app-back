let Color,Product;_42f‍.x([["createColor",()=>createColor],["updateColor",()=>updateColor],["deleteColor",()=>deleteColor],["getColors",()=>getColors]]);_42f‍.w("../models",[["Color",["Color"],function(v){Color=v}],["Product",["Product"],function(v){Product=v}]]);

       const createColor = async (req, res) => {
  try {
    let color = await Color.create(req.body);
    const colorToBeAssignProducts = await Color.findOne({
      where: {
        id: color.id,
      },
      include: {
        model: Product,
        as: 'colors'
      }
    })
    await colorToBeAssignProducts.addColors(req.body.products, {through: 'ProductColors'})
    return res.status(200).json({message: "color!", data: color})
  } catch (err) {
    _42f‍.g.console.log("error ", err)
    return res.status(500).json({message: 'Something went wrong!'})
  }
}

       const updateColor = async (req, res) => {
  try {
    await Color.update(req.body, {
      where: {id: req.params.id}
    })
    return res.status(201).json({message: "color is updated"})
  } catch (err) {
    _42f‍.g.console.log("err", err)
  }
}

       const deleteColor = async (req, res) => {
  try {
    let x = await Color.destroy({where: {id: req.params.id}})
    return res.status(201).json({message: "color is deleted"})
  } catch (err) {
    _42f‍.g.console.log("error", err)
  }
}

       const getColors = async (req, res) => {
  try {
    let color = await Color.findAll();
    res.status(200).json({data: color})
  } catch (err) {
    _42f‍.g.console.log("error", err)
  }
}