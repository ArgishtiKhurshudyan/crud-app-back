let User,Product,Color,bcrypt,createError,jwt;_8d5‍.x([["register",()=>register],["login",()=>login]]);_8d5‍.w("../models",[["User",["User"],function(v){User=v}],["Product",["Product"],function(v){Product=v}],["Color",["Color"],function(v){Color=v}]]);_8d5‍.w("bcryptjs",[["default",["bcrypt"],function(v){bcrypt=v}]]);_8d5‍.w("../utils/error",[["createError",["createError"],function(v){createError=v}]]);_8d5‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);




const generateAccessToken = (id, roles) => {
  const payload = {
    id,
    roles
  }
  return jwt.sign(payload, process.env.JWT, {expiresIn: '24h'})
}

       const register = async (req, res) => {
  try {
    const salt = bcrypt.genSaltSync(10);
    const hash = bcrypt.hashSync(req.body.password, salt);
    let data = await User.findOne({where: {email: req.body.email}})
    if (data) {
      res.status(200).json({message: "user is already created"});
    } else {
      let user = await User.create({
        ...req.body,
        password: hash,
      });
      const {password, ...otherDetails} = user._previousDataValues
      res.status(200).json({details: {...otherDetails}})
    }
  } catch (err) {
    throw err
  }
};

       const login = async (req, res, next) => {
  try {
    const user = await User.findOne(
      {
        where: {email: req.body.email},
        include: {
          model: Product,
          include: {
            model: Color,
            as: 'products'
          }
        }
      });

    if (!user) return next(createError(401, "username not found"));
    const isPasswordCorrect = await bcrypt.compare(
      req.body.password,
      user.password,
    );

    if (!isPasswordCorrect)
      return next(createError(401, "Wrong password or username"));
    const token = generateAccessToken(user.id, user.roles, {isAdmin: user.isAdmin},)
    const {password, isAdmin, ...otherDetails} = user._previousDataValues

    res
      .cookie("access_token", token, {
        httpOnly: true,
      })
      .status(200)
      .json({details: {...otherDetails}, isAdmin});
  } catch (err) {
    return res.status(500).json(err)
  }
};